# Rime schema
# encoding: utf-8

schema:
  schema_id: flypy_bingji
  name: 小鹤并击 # 鹤拼快形 
  version: "0.1"
  author:
    - Functoreality
    - 双拼并击@gaboolic
  description: |
    小鹤双拼，自然快手辅助码
  dependencies:
    - luna_pinyin
    - chaizi
    - stroke
    - zrlf
    - easy_en

switches:
  - name: ascii_mode
    reset: 1
    states: [ 中文, 西文 ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: simplification
    reset: 1
    states: [ 漢字, 汉字 ]
  - name: ascii_punct
    states: [ 。，, ．， ]

engine:
  processors:
    - ascii_composer
    - chord_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - affix_segmentor@quanpin
    - affix_segmentor@verbatim ## not as the last of this list
    - affix_segmentor@soft_capslock
    - affix_segmentor@dbpy_flypy_help
    - affix_segmentor@easy_en_simp
    - affix_segmentor@tex_translator
    - fallback_segmentor
  translators:
    - punct_translator
    - table_translator@custom_phrase
    - reverse_lookup_translator
    - reverse_lookup_translator@reverse_stroke
    - reverse_lookup_translator@reverse_zrlf
    - script_translator
    - script_translator@quanpin
    - table_translator@soft_capslock
    - table_translator@dbpy_flypy_help
    - lua_translator@tex_translator
    - lua_translator@func_translator
    - table_translator@easy_en_simp ## 添加注释后：停用单词输入
  filters:
    - simplifier
    - uniquifier

speller:
  alphabet: zyxwvutsrqponmlkjihgfedcba[
  initials: zyxwvutsrqponmlkjihgfedcba
  delimiter: " '"
  ## speller 未允许 aj 表示 an
  algebra:
    - derive/^(..).+$/$1/
    - derive/^(..[[].).+$/$1/
    - derive/^([jqxy])u/$1v/
    - xform/[[]// ## 取消注释后：直接引导辅助码

chord_composer:
  # 字母表，包含用并击按键
  # 击键一律以字母表顺序排列
  alphabet: "aqzswxdecfrvgtbhynjumki,lo.;p',./"
  algebra:
    # - "xform/^,$/,/"
    # - "xform/^\.$/./"
    # 定义左手11键       
    - xform/^at(?![左右])/y左/
    - xform/^ar(?![左右])/u左/
    - xform/^ae(?![左右])/i左/
    - xform/^aw(?![左右])/o左/
    - xform/^qf(?![左右])/p左/
    - xform/^as(?![左右])/l左/
    - xform/^ad(?![左右])/k左/
    - xform/^af(?![左右])/j左/
    - xform/^ag(?![左右])/h左/
    - xform/^ac(?![左右])/m左/
    - xform/^av(?![左右])/n左/

    # 定义右手15键
    - xform/jp(?![左右])$/q右/
    - xform/jo(?![左右])$/w右/
    - xform/ji(?![左右])$/e右/
    - xform/ul(?![左右])$/r右/
    - xform/yl(?![左右])$/t右/
    - xform/l;(?![左右])$/s右/
    - xform/kl(?![左右])$/d右/
    - xform/jk(?![左右])$/f右/
    - xform/hl(?![左右])$/g右/    
    - xform/mk(?![左右])$/z右/
    - xform/nk(?![左右])$/x右/
    - xform/ml(?![左右])$/c右/
    - xform/nl(?![左右])$/v右/
    - xform/ni(?![左右])$/b右/
    - xform/;(?![左右])$/a右/
  # 并击完成后套用式样
  output_format:
    - "xform/^(.*)左/$1/"
    - "xform/^(.*)右$/$1/"
    - "xform/^(.*)左(.*)右$/$1$2/"
      
 # 并击过程中套用式样  
  prompt_format:
    # 加方括号
    - "xform/^(.*)$/[$1]/" 

translator:
  dictionary: flypy_flypy.extended
  spelling_hints: 2
  # enable_user_dict: true
  # preedit_format:
    # - "xform/((^|[ '])[bpmfdtnljqx])n/$1iao/"
    # - "xform/((^|[ '])\\w)g/$1eng/"
    # - "xform/((^|[ '])\\w)q/$1iu/"
    # - "xform/((^|[ '])\\w)w/$1ei/"
    # - "xform/((^|[ '])[dtnlgkhjqxyvuirzcs])r/$1uan/"
    # - "xform/((^|[ '])\\w)t/$1ve/"
    # - "xform/((^|[ '])\\w)y/$1un/"
    # - "xform/((^|[ '])[dtnlgkhvuirzcs])o/$1uo/"
    # - "xform/((^|[ '])\\w)p/$1ie/"
    # - "xform/((^|[ '])[jqx])s/$1iong/"
    # - "xform/((^|[ '])\\w)s/$1ong/"
    # - "xform/((^|[ '])\\w)d/$1ai/"
    # - "xform/((^|[ '])\\w)f/$1en/"
    # - "xform/((^|[ '])\\w)h/$1ang/"
    # - "xform/((^|[ '])\\w)j/$1an/"
    # - "xform/((^|[ '])[gkhvuirzcs])k/$1uai/"
    # - "xform/((^|[ '])\\w)k/$1ing/"
    # - "xform/((^|[ '])[jqxnl])l/$1iang/"
    # - "xform/((^|[ '])\\w)l/$1uang/"
    # - "xform/((^|[ '])\\w)z/$1ou/"
    # - "xform/((^|[ '])[gkhvuirzcs])x/$1ua/"
    # - "xform/((^|[ '])\\w)x/$1ia/"
    # - "xform/((^|[ '])\\w)c/$1ao/"
    # - "xform/((^|[ '])[dtgkhvuirzcs])v/$1ui/"
    # - "xform/((^|[ '])\\w)b/$1in/"
    # - "xform/((^|[ '])\\w)m/$1ian/"
    # - "xform/(^|[ '])([aoe])\\2(\\w)/$1$2$3/"
    # - "xform/(^|[ '])v/$1zh/"
    # - "xform/(^|[ '])i/$1ch/"
    # - "xform/(^|[ '])u/$1sh/"
    # - "xform/((^|[ '])[jqxy])v/$1u/"
    # - "xform/((^|[ '])[nl])v/$1ü/"

custom_phrase:
  dictionary: ""
  user_dict: custom_phrase
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: 1




reverse_lookup:
  dictionary: chaizi_flypy # stroke
  enable_completion: true
  prefix: "ab"
  suffix: "'"
  tips: 〔部件组字〕 # 〔筆畫〕
  preedit_format:
    # - xlit/hspnz/一丨丿丶乙/


reverse_zrlf:
  tag: reverse_zrlf
  dictionary: zrlf # stroke
  enable_completion: true
  prefix: "olf"
  suffix: "'"
  tips: 〔自然兩分〕
  preedit_format:
    # - xlit/hspnz/一丨丿丶乙/

reverse_stroke:
  tag: reverse_stroke
  dictionary: stroke # stroke
  enable_completion: true
  prefix: "ob"
  suffix: "'"
  tips: 〔筆畫〕 # 〔筆畫〕
  preedit_format:
    - xlit/hspnz/一丨丿丶乙/

punctuator:
  import_preset: default

key_binder:
  import_preset: default
  bindings:
    #- { when: composing, accept: Tab, send: '[' } ## 取消注释后：tab引导辅助码
    - { when: composing, accept: Control+m, send: Return }
    - { when: composing, accept: Control+w, send: Control+BackSpace }
    - { when: has_menu, accept: semicolon, send: 2 }
    - { when: has_menu, accept: slash, send: 3 }
    - { when: composing, accept: Control+i, send: Shift+Right }
    - { when: composing, accept: Control+o, send: Shift+Left }
    ## 对以下4行取消注释后：启用光标回退至特定音节后、补充辅助码的功能
    ## （自然码等其他双拼用户请在 pinyin_switch.yaml 中设置）
    #- { when: composing, accept: Control+1, send_sequence: '{Home}{Shift+Right}[' }
    #- { when: composing, accept: Control+2, send_sequence: '{Home}{Shift+Right}{Shift+Right}[' }
    #- { when: composing, accept: Control+3, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}[' }
    #- { when: composing, accept: Control+4, send_sequence: '{Home}{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}[' }

recognizer:
  # import_preset: default
  patterns:
    uppercase: "^[A-Z].*$"
    punct: '^/[015-9A-Za-z]+$' ## use "/er" instead of "/2"
    ## associate schemes: 
    reverse_lookup: "^ab[a-z]*'?$" # "[[]b[a-z]*'?$"
    reverse_stroke: "^ob[A-Za-z]*$"
    reverse_zrlf: "^olf[A-Za-z]*$"
    quanpin: "^ap[a-z]*'?$"
    verbatim: "^as.*$"
    soft_capslock: "^au.*$"
    dbpy_flypy_help: "^ac.*$"
    easy_en_simp: "^aw[a-z]*"
    tex_translator: "^al(.*)$"
    func_translator: "^af(.*)$"

menu:
  page_size: 8

quanpin:
  tag: quanpin
  dictionary: luna_pinyin ## 用户可自行改为扩展后的词典
  prism: luna_pinyin
  enable_completion: true
  prefix: "ap"
  suffix: "'"
  tips: "全拼"

verbatim:
  tag: verbatim ## english; ascii
  prefix: "as"
  tips: "cii"
soft_capslock:
  dictionary: ""
  user_dict: uppercase
  tag: soft_capslock
  prefix: "au"
  tips: "临时大写"
  db_class: stabledb
  enable_completion: false
  enable_sentence: true
  initial_quality: 1
dbpy_flypy_help:
  dictionary: ""
  user_dict: dbpy_flypy_help
  tag: dbpy_flypy_help
  prefix: "ac"
  tips: "小鹤双拼查键"
  db_class: stabledb
  enable_completion: true
  enable_sentence: false
  initial_quality: 1
easy_en_simp:
  tag: easy_en_simp
  dictionary: easy_en
  enable_completion: true
  enable_sentence: false
  prefix: "aw"
  # suffix: "'"
  tips: "英文单词（可去元音）"
  spelling_hints: 9
  comment_format:
    - xform/^.+$//
tex_translator:
  tag: tex_translator
  prefix: "al"
  tips: " TeX 公式"

